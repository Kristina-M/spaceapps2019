{"ast":null,"code":"var _jsxFileName = \"/Users/kristinamahony/Documents/client_dev/spaceapps2019/space-apps/src/App.js\";\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport { Polygon } from \"google-maps-react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\n\nconst communities = require('./ml_community_predict.json');\n\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.displayMarkers = () => {\n      return this.state.stores.map((store, index) => {\n        return React.createElement(Marker, {\n          key: index,\n          id: index,\n          position: {\n            lat: store.latitude,\n            lng: store.longitude\n          },\n          onClick: () => console.log(\"You clicked me!\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.displayCommunities = () => {\n      var coords;\n      var key = 1;\n      var community_polygons = [];\n\n      for (var community in communities) {\n        key++;\n        coords = communities[community];\n        community_polygons.push(React.createElement(Polygon, {\n          key: key,\n          paths: coords,\n          strokeColor: \"#ffaa17\",\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: \"#ffa640\",\n          fillOpacity: 0.35,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }));\n        console.log(coords);\n      }\n\n      return community_polygons;\n    };\n\n    this.state = {\n      stores: [{\n        lat: 47.49855629475769,\n        lng: -122.14184416996333\n      }, {\n        latitude: 47.359423,\n        longitude: -122.021071\n      }, {\n        latitude: 47.2052192687988,\n        longitude: -121.988426208496\n      }, {\n        latitude: 47.6307081,\n        longitude: -122.1434325\n      }, {\n        latitude: 47.3084488,\n        longitude: -122.2140121\n      }, {\n        latitude: 47.5524695,\n        longitude: -122.0425407\n      }]\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(AppBar, {\n      position: \"static\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Planet Captain\"))), React.createElement(Map, {\n      google: this.props.google,\n      zoom: 15,\n      style: mapStyles,\n      mapType: \"satellite\",\n      initialCenter: {\n        lat: 26.998618,\n        lng: 81.554844\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, this.displayCommunities(), React.createElement(Marker, {\n      position: {\n        lat: 26.8,\n        lng: 81.9\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyANs8IkEudsPGEA1dicW7gLY8T7K6orJ3E'\n})(MapContainer);","map":{"version":3,"sources":["/Users/kristinamahony/Documents/client_dev/spaceapps2019/space-apps/src/App.js"],"names":["React","Component","Map","GoogleApiWrapper","InfoWindow","Marker","Polygon","makeStyles","AppBar","Toolbar","Typography","Button","mapStyles","width","height","communities","require","MapContainer","constructor","props","displayMarkers","state","stores","map","store","index","lat","latitude","lng","longitude","console","log","displayCommunities","coords","key","community_polygons","community","push","render","google","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport { Polygon } from \"google-maps-react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst mapStyles = {\n    width: '100%',\n    height: '100%'\n};\n\nconst communities = require('./ml_community_predict.json');\n\nexport class MapContainer extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            stores: [{lat: 47.49855629475769, lng: -122.14184416996333},\n                {latitude: 47.359423, longitude: -122.021071},\n                {latitude: 47.2052192687988, longitude: -121.988426208496},\n                {latitude: 47.6307081, longitude: -122.1434325},\n                {latitude: 47.3084488, longitude: -122.2140121},\n                {latitude: 47.5524695, longitude: -122.0425407}]\n        }\n\n    }\n\n    displayMarkers = () => {\n        return this.state.stores.map((store, index) => {\n            return <Marker key={index} id={index} position={{\n                lat: store.latitude,\n                lng: store.longitude\n            }}\n                           onClick={() => console.log(\"You clicked me!\")}/>\n        })\n    }\n\n    displayCommunities = () => {\n        var coords;\n        var key = 1 ;\n        var community_polygons = [];\n        for ( var community in communities){\n            key++;\n            coords = communities[community]\n            community_polygons.push(<Polygon\n                key={key}\n                paths={coords}\n                strokeColor=\"#ffaa17\"\n                strokeOpacity={0.8}\n                strokeWeight={2}\n                fillColor=\"#ffa640\"\n                fillOpacity={0.35} />)\n            console.log(coords)\n        }\n        return community_polygons;\n    }\n\n    render() {\n        return (\n            <div>\n                <AppBar position=\"static\" color=\"primary\">\n                    <Toolbar>\n                        <Typography variant=\"h6\">\n                            Planet Captain\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n            <Map\n                google={this.props.google}\n                zoom={15}\n                style={mapStyles}\n                mapType={\"satellite\"}\n                initialCenter={{lat: 26.998618, lng: 81.554844}}>\n                {this.displayCommunities()}\n                <Marker\n                position={{ lat: 26.8, lng: 81.9 }}\n            />\n            </Map>\n            </div>\n\n        );\n    }\n}\n\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyANs8IkEudsPGEA1dicW7gLY8T7K6orJ3E'\n})(MapContainer);"]},"metadata":{},"sourceType":"module"}